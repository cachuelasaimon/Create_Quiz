{"version":3,"sources":["components/supermarket.png","logo.svg","components/FireNavbar.js","reducer/postReducer.js","reducer/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FireNavbar","state","isOpen","toggle","setState","Navbar","dark","expand","color","className","Container","NavbarBrand","href","src","basketLogo","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","initialState","template","quizName","subject","trial","timeLimit","itemType","combineReducers","newQuiz","action","type","middleware","thunk","store","createStore","reducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,yC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,2OC4C5BC,E,4MA9BXC,MAAQ,CACJC,QAAO,G,EAGXC,OAAS,WACL,EAAKC,SAAS,CACVF,QAAS,EAAKD,MAAMC,U,uDAKxB,OACI,kBAACG,EAAA,EAAD,CAAQC,MAAI,EAACC,OAAO,KAAKC,MAAM,OAAOC,UAAU,QAC5C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,KAAK,IAAG,yBAAKC,IAAKC,IAAYL,UAAU,iBACrD,kBAACM,EAAA,EAAD,CAAeC,QAASC,KAAKd,SAC7B,kBAACe,EAAA,EAAD,CAAUC,QAAM,EAACjB,OAAQe,KAAKhB,MAAMC,QAChC,kBAACkB,EAAA,EAAD,CAAKD,QAAM,EAACV,UAAU,WAClB,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,sB,GArBPC,a,uBCVnBC,EAAe,CACjBC,SAAU,GACVC,SAAU,GACVC,QAAS,GACTC,MAAO,GACPC,UAAW,GACXC,SAAU,ICLCC,cAAgB,CAC3BC,QDOW,WAAyC,IAA/B/B,EAA8B,uDAAtBuB,EAAcS,EAAQ,uCAEtC,OADNA,EAAOC,KACMjC,KELlBkC,EAAa,CAACC,KAQLC,EALDC,YAAYC,EANL,GAM4BC,YAC7CC,IAAe,WAAf,EAAmBN,GACnBO,OAAOC,8BAAgCD,OAAOC,iCCgBnCC,E,uKAbX,OACE,yBAAKnC,UAAU,OACd,kBAAC,IAAD,CAAU4B,MAAQA,GACf,kBAAC,EAAD,MAEA,mC,GAPQd,aCFEsB,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa0b7c43.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/supermarket.9c8d93fd.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Container, \r\n         Navbar, \r\n         NavbarBrand, \r\n         NavbarToggler, \r\n         Collapse, \r\n         Nav, \r\n         NavItem, \r\n         NavLink } from 'reactstrap';\r\nimport basketLogo from './supermarket.png';\r\n\r\n\r\nclass FireNavbar extends Component {\r\n    // Initial state object\r\n    state = {\r\n        isOpen:false\r\n    }\r\n    // toggler Function\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n    // Render navBar \r\n    render () {\r\n        return (\r\n            <Navbar dark expand=\"sm\" color=\"dark\" className=\"mb-5\">\r\n                <Container>\r\n                    <NavbarBrand href=\"\"><img src={basketLogo} className=\"basket-logo\"/></NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse navbar isOpen={this.state.isOpen}>\r\n                        <Nav navbar className=\"ml-auto\">\r\n                            <NavItem>\r\n                                <NavLink>List</NavLink>\r\n                                </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n};\r\n\r\nexport default FireNavbar\r\n","// Import Action Types\r\n\r\nconst initialState = {\r\n    template: '',\r\n    quizName: '',\r\n    subject: '',\r\n    trial: '',\r\n    timeLimit: '',\r\n    itemType: {}\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch(action.type) {\r\n        default: return state;\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport postReducer from './postReducer'\r\n\r\nexport default combineReducers({\r\n    newQuiz: postReducer\r\n})","import { createStore, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducer from './reducer'\n\n// Initial State\nconst initialState = {}\n\n// Middleware \nconst middleware = [thunk]\n\n// Store\nconst store = createStore(reducer, initialState, compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nexport default store","import React, { Component} from 'react';\nimport logo from './logo.svg';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\n\nimport Navbar from './components/FireNavbar';\n// Test Component\n// import ClickCounter from './components/ClickCounter'\n// import HoverCounter from './components/HoverCounter'\n\n// Redux\nimport { Provider } from 'react-redux'\nimport store from './store.js'\n\nclass App extends Component {\n  render () {\n    return (\n      <div className=\"App\">\n       <Provider store={ store }>\n          <Navbar />\n          \n          <hr/>\n          \n       </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}